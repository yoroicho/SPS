/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sps;

import java.awt.AWTException;
import java.awt.Frame;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import preCon.*;

/**
 *
 * @author AnyUser
 */
public class SendJDialog extends javax.swing.JDialog {

    private ConfigOkCancelDialog configOkCancelDialog;
    HashMap<String, PassItem> passMap = new HashMap<String, PassItem>();

    /**
     * Creates new form SendJDialog
     */
    public SendJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.buttonGroupMode.add(jRadioButton1);
        this.buttonGroupMode.add(jRadioButton2);
        this.buttonGroupMode.add(jRadioButton3);

        this.setModal(false);  // Must!

        configOkCancelDialog = new ConfigOkCancelDialog(parent, true);
        configOkCancelDialog.setSendJDialog(this);
    }

    public boolean CodeCheck(char[] code) {

//
        Calendar c = Calendar.getInstance();

        //
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");
        //System.out.println(sdf.format(c.getTime()));
        char[] sdfChar = sdf.format(c.getTime()).toCharArray();
        /**
        for (char k : sdfChar) {
            System.out.println(k);
        }
        */
        int j = 8;
        boolean flag = true;
        if (code.length != 4) {
            flag = false;
        }
        for (char codePiece : code) {
            // System.out.println(Character.getNumericValue(codePiece));
            if (Character.getNumericValue(codePiece)
                    != 9 - Character.getNumericValue(sdfChar[j])) {
                // System.out.println("false Piece");
                flag = false;
                break;
            } else {
                // System.out.println("true Piece");
                j++;
            }
        }

        // System.out.println("Anser" + flag);
        return flag;
        //
        //sdf.applyPattern("a hh:mm:ss SSS");
        //System.out.println(sdf.format(c.getTime()));

    }

    public String parentTest() {
        return "parentTest is OK.";
    }

    public void setPassMap(String tag, PassItem passItem) {
        passMap.put(tag, passItem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupMode = new javax.swing.ButtonGroup();
        jComboBoxItem = new javax.swing.JComboBox();
        jPasswordField1 = new javax.swing.JPasswordField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jToggleButtonDecisionSend = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setIconImage(null);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jComboBoxItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-----", "-NFR-" }));
        jComboBoxItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxItemItemStateChanged(evt);
            }
        });
        jComboBoxItem.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jComboBoxItemHierarchyChanged(evt);
            }
        });
        jComboBoxItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBoxItemFocusGained(evt);
            }
        });
        jComboBoxItem.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jComboBoxItemInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jRadioButton1.setText("jRadioButton1");

        jRadioButton2.setText("jRadioButton1");

        jRadioButton3.setText("jRadioButton1");

        jButton1.setText("R/F");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToggleButtonDecisionSend.setText("DS");
        jToggleButtonDecisionSend.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButtonDecisionSendStateChanged(evt);
            }
        });

        jLabel1.setBackground(java.awt.SystemColor.text);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("_ _ _ _ _");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBoxItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPasswordField1)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonDecisionSend)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRadioButton1)
                        .addComponent(jRadioButton2)
                        .addComponent(jRadioButton3))
                    .addComponent(jToggleButtonDecisionSend, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
       
    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
    }//GEN-LAST:event_formFocusLost

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
       // >>>>this.setSize(120, 184);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // System.out.println(evt.toString());
        if (CodeCheck(this.jPasswordField1.getPassword())
                && this.jToggleButtonDecisionSend.isSelected()) {
            try {
                Robot robot = new Robot();

                Keyboard keyboard = new Keyboard(robot);
                int radioButtonFlag = -1;
                if (this.jRadioButton1.isSelected()) {
                    radioButtonFlag = 0;
                }
                if (this.jRadioButton2.isSelected()) {
                    radioButtonFlag = 1;
                }
                if (this.jRadioButton3.isSelected()) {
                    radioButtonFlag = 2;
                }
                switch (radioButtonFlag) {
                    case 0:
                        keyboard.doTyping(passMap.get(this.jComboBoxItem.getSelectedItem()).getUrl());
                        // System.out.println("case 0 " + passMap.get(this.jComboBoxItem.getSelectedItem()).getUrl());
                        break;
                    case 1:
                        keyboard.doTyping(passMap.get(this.jComboBoxItem.getSelectedItem()).getUserName());
                        break;
                    case 2:
                        keyboard.doTyping(passMap.get(this.jComboBoxItem.getSelectedItem()).getPassCode());
                        break;
                    default:
                        System.out.append("Select Error!");
                }
            } catch (AWTException ex) {
                Logger.getLogger(SendJDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(SendJDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (this.jRadioButton3.isSelected()) {
            this.jPasswordField1.setText(null);
        }
        this.setSize(116, 50);
        this.jToggleButtonDecisionSend.setSelected(false);
    }//GEN-LAST:event_formWindowLostFocus

    private void jComboBoxItemInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jComboBoxItemInputMethodTextChanged
        // System.out.println("jComboBoxItemInputMethodTextChanged");
    }//GEN-LAST:event_jComboBoxItemInputMethodTextChanged

    private void jComboBoxItemHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jComboBoxItemHierarchyChanged
        // System.out.println("jComboBoxItemHierarchyChanged");

    }//GEN-LAST:event_jComboBoxItemHierarchyChanged

    private void jComboBoxItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxItemItemStateChanged
        // System.out.println("jComboBoxItemItemStateChanged");
        buttonGroupMode.clearSelection();
        jToggleButtonDecisionSend.setSelected(false);
    }//GEN-LAST:event_jComboBoxItemItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser filechooser = new JFileChooser();

        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            // System.out.println(file.getName());
            configOkCancelDialog.setFileXML(file);
            configOkCancelDialog.setVisible(true);
            //configOkCancelDialog.setFilelocText(file);
            jComboBoxItem.removeAllItems();
            for (String tag : passMap.keySet()) {
                jComboBoxItem.addItem(tag);
            }

        } else if (selected == JFileChooser.CANCEL_OPTION) {
            System.out.println("キャンセルされました");
        } else if (selected == JFileChooser.ERROR_OPTION) {
            System.out.println("エラー又は取消しがありました");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxItemFocusGained

    }//GEN-LAST:event_jComboBoxItemFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
      this.setSize(120, 175);
    }//GEN-LAST:event_formMouseClicked

    private void jToggleButtonDecisionSendStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButtonDecisionSendStateChanged
        if (this.jToggleButtonDecisionSend.isSelected()) {
            // System.out.println("ON");
            this.jPasswordField1.setEnabled(false);
        } else if (!this.jToggleButtonDecisionSend.isSelected()) {
            // System.out.println("OFF");
            this.jPasswordField1.setEnabled(true);
        } else {
            // System.out.println("OTHER");
        }
    }//GEN-LAST:event_jToggleButtonDecisionSendStateChanged

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
  
    }//GEN-LAST:event_formMouseEntered

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
           
    }//GEN-LAST:event_formMousePressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       
    }//GEN-LAST:event_formWindowActivated

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
    }//GEN-LAST:event_formKeyPressed

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited

    }//GEN-LAST:event_formMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SendJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SendJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SendJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SendJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SendJDialog dialog = new SendJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupMode;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBoxItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JToggleButton jToggleButtonDecisionSend;
    // End of variables declaration//GEN-END:variables
}
